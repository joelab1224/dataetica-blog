'use client';

import { useState, useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import BlogPostCard from '@/components/BlogPostCard';
import BlogFilters from '@/components/BlogFilters';
import Header from '@/components/layout/Header';
import Footer from '@/components/layout/Footer';
import LoadingSpinner from '@/components/ui/LoadingSpinner';
import Button from '@/components/ui/Button';
import MainNavigation from '@/components/navigation/MainNavigation';
import EthicsIconPattern from '@/components/ui/EthicsIconPattern';
import FeaturedArticlesSection from '@/components/FeaturedArticlesSection';
import StatisticsSection from '@/components/StatisticsSection';
import TopicsSection from '@/components/TopicsSection';

interface BlogPost {
  id: string;
  title: string;
  slug: string;
  excerpt: string;
  featuredImage?: string;
  publishedAt: string;
  author: {
    name: string;
  };
  categories: Array<{
    name: string;
    slug: string;
  }>;
}

interface PaginationData {
  page: number;
  pageSize: number;
  totalPages: number;
  totalPosts: number;
  hasMore: boolean;
}

interface Category {
  id: string;
  name: string;
  slug: string;
  postCount: number;
  description?: string;
}

export default function HomePage(): JSX.Element {
  const searchParams = useSearchParams();
  
  const [posts, setPosts] = useState<BlogPost[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [categories, setCategories] = useState<Category[]>([]);
  const [showAllArticles, setShowAllArticles] = useState(false);
  const [pagination, setPagination] = useState<PaginationData>({
    page: 1,
    pageSize: 9,
    totalPages: 1,
    totalPosts: 0,
    hasMore: false,
  });

  // Get initial filters from URL
  const [filters, setFilters] = useState({
    category: searchParams.get('category') || undefined,
    search: searchParams.get('search') || undefined,
  });

  // Fetch posts
  const fetchPosts = async (page = 1, currentFilters = filters) => {
    try {
      setLoading(true);
      setError(null);
      
      const params = new URLSearchParams({
        page: page.toString(),
        pageSize: pagination.pageSize.toString(),
        status: 'PUBLISHED',
      });
      
      if (currentFilters.category) {
        params.set('category', currentFilters.category);
      }
      
      if (currentFilters.search) {
        params.set('search', currentFilters.search);
      }

      const response = await fetch(`/api/blog/posts?${params}`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch posts');
      }
      
      const data = await response.json();
      setPosts(data.posts || []);
      setPagination(data.pagination || pagination);
    } catch (err) {
      console.error('Error fetching posts:', err);
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  // Fetch categories
  const fetchCategories = async () => {
    try {
      const response = await fetch('/api/blog/categories');
      if (response.ok) {
        const data = await response.json();
        setCategories(data.categories || []);
      }
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  };

  // Initial fetch
  useEffect(() => {
    fetchPosts(1, filters);
    fetchCategories();
  }, []);

  // Handle filter changes
  const handleFiltersChange = (newFilters: { category?: string; search?: string }) => {
    setFilters(newFilters);
    fetchPosts(1, newFilters);
  };

  // Handle pagination
  const handlePageChange = (newPage: number) => {
    fetchPosts(newPage, filters);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // Handle scroll to all articles
  const scrollToAllArticles = () => {
    setShowAllArticles(true);
    const filtersElement = document.querySelector('[data-filters-section]');
    if (filtersElement) {
      filtersElement.scrollIntoView({ behavior: 'smooth' });
    }
  };

  // Render pagination
  const renderPagination = () => {
    if (pagination.totalPages <= 1) return null;

    const pages = [];
    const maxVisiblePages = 5;
    
    let startPage = Math.max(1, pagination.page - Math.floor(maxVisiblePages / 2));
    const endPage = Math.min(pagination.totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
      pages.push(
        <Button
          key={i}
          onClick={() => handlePageChange(i)}
          variant={pagination.page === i ? 'primary' : 'secondary'}
          size="sm"
          className="mx-1"
        >
          {i}
        </Button>
      );
    }

    return (
      <div className="flex justify-center items-center mt-12 space-x-2">
        <Button
          onClick={() => handlePageChange(pagination.page - 1)}
          disabled={pagination.page === 1}
          variant="secondary"
          size="sm"
        >
          Anterior
        </Button>
        
        {pages}
        
        <Button
          onClick={() => handlePageChange(pagination.page + 1)}
          disabled={pagination.page === pagination.totalPages}
          variant="secondary"
          size="sm"
        >
          Siguiente
        </Button>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <section className="bg-hero-gradient min-h-screen flex items-center justify-center relative overflow-hidden">
        <div className="absolute inset-0 opacity-[0.06] text-white">
          <EthicsIconPattern />
        </div>
        
        <div className="absolute top-20 left-12 w-32 h-32 bg-white/4 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-32 right-16 w-48 h-48 bg-white/3 rounded-full blur-3xl animate-pulse" style={{animationDelay: '2s'}}></div>
        <div className="absolute top-1/2 left-1/4 w-24 h-24 bg-white/5 rounded-full blur-2xl animate-pulse" style={{animationDelay: '4s'}}></div>
        <div className="absolute top-1/4 right-1/3 w-20 h-20 bg-white/4 rounded-full blur-2xl animate-pulse" style={{animationDelay: '6s'}}></div>
        
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="w-full max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
            <div className="flex flex-col items-center justify-center text-center space-y-8">
              
              <div className="transform hover:scale-105 transition-transform duration-300">
                <div className="inline-flex items-center px-8 py-4 bg-white/12 backdrop-blur-xl rounded-full border border-white/25 shadow-2xl">
                  <span className="text-hero-accent text-white font-medium">
                    üî¨ Investigaci√≥n ‚Ä¢ ü§ñ Inteligencia Artificial ‚Ä¢ ‚öñÔ∏è √âtica Digital
                  </span>
                </div>
              </div>
              
              <div className="space-y-4">
                <h1 className="text-hero-main text-white font-heading text-center">
                  Explorando la intersecci√≥n entre
                </h1>
                <h1 className="text-hero-main bg-gradient-to-r from-white via-purple-100 to-white bg-clip-text text-transparent font-heading text-center">
                  tecnolog√≠a y √©tica digital
                </h1>
              </div>
              
              <div className="max-w-3xl">
                <p className="text-hero-subtitle text-white/95 font-body leading-relaxed text-center">
                  Navegamos juntos el impacto de la tecnolog√≠a en nuestras vidas, analizando c√≥mo las decisiones digitales moldean nuestra sociedad y construimos un futuro m√°s consciente.
                </p>
              </div>
              
              <div className="flex flex-col sm:flex-row gap-6 justify-center items-center pt-4">
                  <Button 
                    variant="white" 
                    size="lg"
                    onClick={scrollToAllArticles}
                    className="font-semibold px-8 py-4 group transition-all duration-300 hover:scale-105 hover:shadow-2xl w-full sm:w-auto min-w-[200px]"
                  >
                    <span className="flex items-center justify-center">
                      Explorar Art√≠culos
                      <svg className="w-5 h-5 ml-3 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                      </svg>
                    </span>
                  </Button>
                  <Button 
                    variant="white" 
                    size="lg"
                    onClick={() => {
                      const topicsElement = document.getElementById('topics');
                      if (topicsElement) {
                        topicsElement.scrollIntoView({ behavior: 'smooth' });
                      }
                    }}
                    className="font-semibold px-8 py-4 group transition-all duration-300 hover:scale-105 hover:shadow-2xl w-full sm:w-auto min-w-[180px]"
                  >
                    <span className="flex items-center justify-center">
                      <svg className="w-5 h-5 mr-3 transition-transform group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                      </svg>
                      Ver Temas
                    </span>
                  </Button>
                </div>
              </div>
              
              <div className="flex flex-col lg:flex-row items-center justify-center gap-6 lg:gap-8 text-hero-accent text-white/90 max-w-4xl pt-8">
                  <div className="flex items-center gap-4">
                    <div className="flex -space-x-3">
                      <div className="w-10 h-10 bg-gradient-to-br from-white/25 to-white/15 rounded-full border-2 border-white/40 flex items-center justify-center shadow-lg">
                        <span className="text-sm">üë®‚Äçüíª</span>
                      </div>
                      <div className="w-10 h-10 bg-gradient-to-br from-white/25 to-white/15 rounded-full border-2 border-white/40 flex items-center justify-center shadow-lg">
                        <span className="text-sm">üë©‚Äçüî¨</span>
                      </div>
                      <div className="w-10 h-10 bg-gradient-to-br from-white/25 to-white/15 rounded-full border-2 border-white/40 flex items-center justify-center shadow-lg">
                        <span className="text-sm">üéì</span>
                      </div>
                    </div>
                    <span className="font-medium">Le√≠do por profesionales de tecnolog√≠a</span>
                  </div>
                  
                  {pagination.totalPosts > 0 && (
                    <>
                      <div className="hidden lg:block w-2 h-2 bg-white/50 rounded-full flex-shrink-0"></div>
                      <span className="font-medium">
                        {pagination.totalPosts}+ art√≠culos publicados
                      </span>
                    </>
                  )}
                  
                  <div className="hidden lg:block w-2 h-2 bg-white/50 rounded-full flex-shrink-0"></div>
                  <span className="font-medium">Actualizado semanalmente</span>
                </div>
              
            </div>
          </div>
        </div>
        
        <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
          <div className="flex flex-col items-center space-y-2">
            <div className="w-6 h-10 border-2 border-white/40 rounded-full flex justify-center items-start pt-2 bg-white/5 backdrop-blur-sm">
              <div className="w-1.5 h-4 bg-white/70 rounded-full animate-pulse"></div>
            </div>
            <span className="text-white/60 text-xs font-medium">Scroll</span>
          </div>
        </div>
      </section>

      <MainNavigation />
      
      {!showAllArticles && !filters.search && !filters.category && (
        <FeaturedArticlesSection 
          posts={posts}
          onViewAllClick={scrollToAllArticles}
        />
      )}
      
      <StatisticsSection 
        totalPosts={pagination.totalPosts}
        totalCategories={categories.length}
      />
      
      <TopicsSection 
        categories={categories}
        className="bg-white"
      />
      <div id="topics" className="absolute -mt-16"></div>

      <main className="container padding-responsive py-12" data-filters-section>
        <div className="text-center mb-8">
          <h2 className="text-section-header text-primary mb-4 font-heading">
            {showAllArticles || filters.search || filters.category 
              ? 'Todos los Art√≠culos' 
              : 'Explora Nuestro Contenido'
            }
          </h2>
          {(!showAllArticles && !filters.search && !filters.category) && (
            <p className="text-body text-secondary max-w-2xl mx-auto">
              Utiliza los filtros para encontrar exactamente lo que buscas
            </p>
          )}
        </div>
        
        <BlogFilters onFiltersChange={handleFiltersChange} />
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-large mb-8">
            {error}
          </div>
        )}

        {loading ? (
          <div className="flex justify-center py-12">
            <LoadingSpinner size="lg" />
          </div>
        ) : (
          <>
            {!loading && (
              <div className="mb-6 text-secondary text-nav-card font-body">
                {pagination.totalPosts === 0 ? (
                  'No se encontraron art√≠culos'
                ) : (
                  `Mostrando ${((pagination.page - 1) * pagination.pageSize) + 1}-${Math.min(pagination.page * pagination.pageSize, pagination.totalPosts)} de ${pagination.totalPosts} art√≠culos`
                )}
              </div>
            )}

            {posts.length === 0 ? (
              <div className="text-center py-16">
                <div className="text-secondary text-section-header space-y-4">
                  {filters.search || filters.category ? (
                    <>
                      <p className="font-body">No se encontraron art√≠culos que coincidan con los filtros seleccionados.</p>
                      <Button
                        onClick={() => {
                          setFilters({});
                          fetchPosts(1, {});
                        }}
                        variant="primary"
                      >
                        Ver todos los art√≠culos
                      </Button>
                    </>
                  ) : (
                    <p className="font-body">No hay art√≠culos disponibles en este momento.</p>
                  )}
                </div>
              </div>
            ) : (
              <div className="grid-responsive gap-8">
                {posts.map((post) => (
                  <BlogPostCard key={post.id} post={post} />
                ))}
              </div>
            )}

            {renderPagination()}
          </>
        )}
      </main>
      
      <Footer />
    </div>
  );
}
